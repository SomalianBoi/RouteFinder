// <auto-generated />
using System;
using Finder.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Finder.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Finder.Domain.Entities.Airline", b =>
                {
                    b.Property<Guid>("AirlineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Callsign")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IATA")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ICAO")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AirlineId");

                    b.ToTable("Airlines");

                    b.HasData(
                        new
                        {
                            AirlineId = new Guid("10658fbb-5b33-4876-a738-d5dec1ea1053"),
                            Alias = "EA",
                            Callsign = "EXAMPLE",
                            Country = "USA",
                            IATA = "EX",
                            ICAO = "EXA",
                            IsActive = true,
                            Name = "Example Airline"
                        });
                });

            modelBuilder.Entity("Finder.Domain.Entities.Airport", b =>
                {
                    b.Property<Guid>("AirportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Altitude")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Dst")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IataCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("IcaoCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Timezone")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TzDatabaseTimezone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AirportId");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            AirportId = new Guid("111f9f68-9761-40c3-8e1d-bdf67295164e"),
                            Altitude = 13,
                            City = "New York",
                            Country = "USA",
                            IataCode = "JFK",
                            IcaoCode = "KJFK",
                            Latitude = 40.641311100000003,
                            Longitude = -73.778139100000004,
                            Name = "John F. Kennedy International Airport",
                            Timezone = -5.0
                        },
                        new
                        {
                            AirportId = new Guid("9b542ab0-4d07-42cd-9ca7-348deec8c3f1"),
                            Altitude = 125,
                            City = "Los Angeles",
                            Country = "USA",
                            IataCode = "LAX",
                            IcaoCode = "KLAX",
                            Latitude = 33.941600000000001,
                            Longitude = -118.4085,
                            Name = "Los Angeles International Airport",
                            Timezone = -8.0
                        });
                });

            modelBuilder.Entity("Finder.Domain.Entities.Flight", b =>
                {
                    b.Property<Guid>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AirlineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DestinationAirportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlaneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SourceAirportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Stops")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("FlightId");

                    b.HasIndex("AirlineId");

                    b.HasIndex("DestinationAirportId");

                    b.HasIndex("PlaneId");

                    b.HasIndex("SourceAirportId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            FlightId = new Guid("bfc2cdd0-a8db-4bb5-9e11-64d8acfcef59"),
                            AirlineId = new Guid("10658fbb-5b33-4876-a738-d5dec1ea1053"),
                            DestinationAirportId = new Guid("9b542ab0-4d07-42cd-9ca7-348deec8c3f1"),
                            PlaneId = new Guid("c80ee1e5-3649-4e5e-a515-e5086d8cc4bd"),
                            SourceAirportId = new Guid("111f9f68-9761-40c3-8e1d-bdf67295164e"),
                            Stops = 0
                        });
                });

            modelBuilder.Entity("Finder.Domain.Entities.Plane", b =>
                {
                    b.Property<Guid>("PlaneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IATACode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("ICAOCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PlaneId");

                    b.ToTable("Planes");

                    b.HasData(
                        new
                        {
                            PlaneId = new Guid("c80ee1e5-3649-4e5e-a515-e5086d8cc4bd"),
                            IATACode = "73G",
                            ICAOCode = "B737",
                            Name = "Boeing 737"
                        });
                });

            modelBuilder.Entity("Finder.Domain.Entities.Flight", b =>
                {
                    b.HasOne("Finder.Domain.Entities.Airline", "airline")
                        .WithMany("Flights")
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finder.Domain.Entities.Airport", "DestinationAirportNavigation")
                        .WithMany("ArrivingFlights")
                        .HasForeignKey("DestinationAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finder.Domain.Entities.Plane", "plane")
                        .WithMany("Flights")
                        .HasForeignKey("PlaneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Finder.Domain.Entities.Airport", "SourceAirportNavigation")
                        .WithMany("DepartingFlights")
                        .HasForeignKey("SourceAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationAirportNavigation");

                    b.Navigation("SourceAirportNavigation");

                    b.Navigation("airline");

                    b.Navigation("plane");
                });

            modelBuilder.Entity("Finder.Domain.Entities.Airline", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("Finder.Domain.Entities.Airport", b =>
                {
                    b.Navigation("ArrivingFlights");

                    b.Navigation("DepartingFlights");
                });

            modelBuilder.Entity("Finder.Domain.Entities.Plane", b =>
                {
                    b.Navigation("Flights");
                });
#pragma warning restore 612, 618
        }
    }
}
